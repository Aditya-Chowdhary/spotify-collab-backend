// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: songs.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const addSong = `-- name: AddSong :one
INSERT INTO songs (song_uri, playlist_uuid)
VALUES ($1, $2)
RETURNING song_uri, playlist_uuid, count
`

type AddSongParams struct {
	SongUri      string    `json:"song_uri"`
	PlaylistUuid uuid.UUID `json:"playlist_uuid"`
}

func (q *Queries) AddSong(ctx context.Context, arg AddSongParams) (Song, error) {
	row := q.db.QueryRow(ctx, addSong, arg.SongUri, arg.PlaylistUuid)
	var i Song
	err := row.Scan(&i.SongUri, &i.PlaylistUuid, &i.Count)
	return i, err
}

const decreaseSongCount = `-- name: DecreaseSongCount :one
UPDATE songs
SET count = count - 1
WHERE song_uri = $1
RETURNING count
`

func (q *Queries) DecreaseSongCount(ctx context.Context, songUri string) (int32, error) {
	row := q.db.QueryRow(ctx, decreaseSongCount, songUri)
	var count int32
	err := row.Scan(&count)
	return count, err
}

const deleteSong = `-- name: DeleteSong :exec
DELETE FROM songs
WHERE song_uri = $1
`

func (q *Queries) DeleteSong(ctx context.Context, songUri string) error {
	_, err := q.db.Exec(ctx, deleteSong, songUri)
	return err
}

const getAllSongs = `-- name: GetAllSongs :many
SELECT song_uri, playlist_uuid, count 
FROM songs
WHERE playlist_uuid = $1
`

func (q *Queries) GetAllSongs(ctx context.Context, playlistUuid uuid.UUID) ([]Song, error) {
	rows, err := q.db.Query(ctx, getAllSongs, playlistUuid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Song
	for rows.Next() {
		var i Song
		if err := rows.Scan(&i.SongUri, &i.PlaylistUuid, &i.Count); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const increaseSongCount = `-- name: IncreaseSongCount :one
UPDATE songs
SET count = count + 1
WHERE song_uri = $1
RETURNING count
`

func (q *Queries) IncreaseSongCount(ctx context.Context, songUri string) (int32, error) {
	row := q.db.QueryRow(ctx, increaseSongCount, songUri)
	var count int32
	err := row.Scan(&count)
	return count, err
}
